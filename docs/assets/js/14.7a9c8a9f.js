(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{278:function(e,o,v){e.exports=v.p+"assets/img/image-20230227144243154.89fafda2.png"},299:function(e,o,v){"use strict";v.r(o);var r=v(14),_=Object(r.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"_9-0-概述"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_9-0-概述"}},[e._v("#")]),e._v(" 9.0 概述")]),e._v(" "),o("img",{staticStyle:{zoom:"50%"},attrs:{src:v(278),alt:"image-20230227144243154"}}),e._v(" "),o("p",[e._v("容器提供者 "),o("code",[e._v("ContainerProvider")]),e._v(" 是用于隔离数据源，并且对数据源获取途径进行增强的组件，它可以理解为数据源容器的容器。当解析器解析配置时，会先找到指定的 "),o("code",[e._v("ContainerProvider")]),e._v("，然后再从中根据 "),o("code",[e._v("namespace")]),e._v(" 获取数据。比如："),o("code",[e._v("Crane4j")]),e._v(" 的全局配置类 "),o("code",[e._v("Crane4jGlobalConfiguration")]),e._v(" 本身就是一个 "),o("code",[e._v("ContainerProvider")]),e._v("。")]),e._v(" "),o("p",[e._v("它被设计作为接入各种第三方数据源的扩展点，代表一类的数据源，第三方的数据源通过实现自己的 "),o("code",[e._v("ContainerProvider")]),e._v(" 来接入 "),o("code",[e._v("crane4j")]),e._v("，不同的 "),o("code",[e._v("ContainerProvider")]),e._v(" 的加载逻辑彼此独立。比如 "),o("code",[e._v("MybatisPlus")]),e._v(" 扩展提供了独立的 "),o("code",[e._v("MpMethodContainerProvider")]),e._v(" 用于提供基于 "),o("code",[e._v("BaseMapper")]),e._v(" 的方法容器，下一个版本基于 JPA 的扩展模块也会有独立的 "),o("code",[e._v("JpaMethodContainerProvider")]),e._v("。")]),e._v(" "),o("p",[e._v("此外，"),o("code",[e._v("ContainerProvider")]),e._v(" 也能够对容器查找功能提供一定的增强，比如默认是实现只支持根据 "),o("code",[e._v("namesapce")]),e._v(" 查找容器，而增强后允许输入表达式，"),o("code",[e._v("provider")]),e._v(" 会将表达式解析为 "),o("code",[e._v("namespace")]),e._v(" 再次查找。")])])}),[],!1,null,null,null);o.default=_.exports}}]);