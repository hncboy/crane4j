(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{280:function(a,t,e){a.exports=e.p+"assets/img/image-20230311184930927.146859c8.png"},302:function(a,t,e){"use strict";e.r(t);var s=e(14),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_9-0-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-0-概述"}},[a._v("#")]),a._v(" 9.0.概述")]),a._v(" "),t("p",[t("img",{attrs:{src:e(280),alt:"image-20230311184930927"}})]),a._v(" "),t("p",[a._v("容器提供者 "),t("code",[a._v("ContainerProvider")]),a._v(" 是用于隔离数据源，并且对数据源获取途径进行增强的组件，它可以简单的理解为数据源容器的容器，比如 "),t("code",[a._v("Crane4j")]),a._v(" 的全局配置类 "),t("code",[a._v("Crane4jGlobalConfiguration")]),a._v(" 本身就是一个 "),t("code",[a._v("ContainerProvider")]),a._v("。")]),a._v(" "),t("p",[a._v("当解析器解析配置得到用户指定的 "),t("code",[a._v("namespace")]),a._v(" 时，会：")]),a._v(" "),t("ul",[t("li",[a._v("先从全局配置类/上下文找到指定的 "),t("code",[a._v("ContainerProvider")]),a._v("；")]),a._v(" "),t("li",[a._v("若有必要，"),t("code",[a._v("ContainerProvider")]),a._v(" 先对 "),t("code",[a._v("namespace")]),a._v(" 进行解析（比如表达式或者方法调用）；")]),a._v(" "),t("li",[t("code",[a._v("ContainerProvider")]),a._v(" 使用解析后的 "),t("code",[a._v("namespace")]),a._v(" 寻找已注册的容器；")])]),a._v(" "),t("p",[a._v("不同的数据源将会根据其所属的 "),t("code",[a._v("ContainerProvider")]),a._v(" 彼此隔离，第三方的框架接入时只需提供自己的 "),t("code",[a._v("ContainerProvider")]),a._v(" 即可，不必担心影响其他的数据源。比如，项目中可能有多个数据源，这种情况下同样用于提供用户信息的容器 "),t("code",[a._v("userContainer")]),a._v(" ，可能就需要同时存在两个，并且指向不同的数据源，此时即可根据 "),t("code",[a._v("ContainerProvider")]),a._v(" 进行区分。")]),a._v(" "),t("h2",{attrs:{id:"_9-1-注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-注册"}},[a._v("#")]),a._v(" 9.1.注册")]),a._v(" "),t("p",[a._v("容器提供者目前只支持基于 Spring 的自动装配进行注册，用户可以实现 "),t("code",[a._v("ContainerProvider")]),a._v(" 接口并通过 "),t("code",[a._v("@Bean")]),a._v(" 方法或者在类上添加 "),t("code",[a._v("@Component")]),a._v(" 注解的方式，将自定义的 "),t("code",[a._v("ContainerProvider")]),a._v(" 注册到 Spring 上下文中，当使用的时候 "),t("code",[a._v("crane4j")]),a._v(" 会自己通过 Spring 获取。")]),a._v(" "),t("h2",{attrs:{id:"_9-2-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-使用"}},[a._v("#")]),a._v(" 9.2.使用")]),a._v(" "),t("p",[a._v("用户可通过 "),t("code",[a._v("@Assemble")]),a._v(" 注解的 "),t("code",[a._v("provider")]),a._v(" 或 "),t("code",[a._v("providerName")]),a._v(" 属性指定该装配操作的容器从哪个提供者获取，比如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserVO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Assemble")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n        container "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"user"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" fooProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        props "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Mapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("src "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("当配置解析时，"),t("code",[a._v("crane4j")]),a._v(" 将从用户指定的 "),t("code",[a._v("fooProvider")]),a._v(" 获取 "),t("code",[a._v("namespace")]),a._v(" 为 "),t("code",[a._v("user")]),a._v(" 的数据源容器。")]),a._v(" "),t("p",[a._v("目前 "),t("code",[a._v("crane4j")]),a._v(" 仅有默认的 "),t("code",[a._v("Crane4jGlobalConfiguration")]),a._v(" 和 "),t("code",[a._v("MybatisPlus")]),a._v(" 扩展使用的 "),t("code",[a._v("MpMethodContainerProvider")]),a._v(" 两个容器供应者。")])])}),[],!1,null,null,null);t.default=n.exports}}]);