(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{277:function(s,a,t){s.exports=t.p+"assets/img/image-20230220182831112.5cd8ccfe.png"},296:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_4-0-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-概述"}},[s._v("#")]),s._v(" 4.0.概述")]),s._v(" "),a("p",[s._v("日常中我们往往会遇到需要填充的对象中仍嵌套有其他对象的情况，针对 “把 A 字段里嵌套的对象取出并展开” 这一操作则称为拆卸操作。一次拆卸操作只会基于一个嵌套对象字段触发，一个对象进行装配操作前，可能需要经过多次拆卸操作。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(277),alt:"image-20230220182831112"}}),s._v(" "),a("p",[s._v("出于性能考虑，为了后续执行装配时能够在一次提交尽可能多的处理数据，因此拆卸操作总是优先于装配操作。该执行逻辑由操作执行器 "),a("code",[s._v("BeanOperationExecutor")]),s._v(" 决定，若有必要，可以重新定义操作执行器以便调整执行流程。")]),s._v(" "),a("h2",{attrs:{id:"_4-1-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-声明"}},[s._v("#")]),s._v(" 4.1.声明")]),s._v(" "),a("p",[s._v("与 "),a("code",[s._v("@Assemble")]),s._v(" 一样，拆卸操作和装配操作在配置解析过程中会被一起解析。通过 "),a("code",[s._v("@Disassemble")]),s._v(" 声明一个拆卸操作。")]),s._v(" "),a("h3",{attrs:{id:"_4-1-1-在属性上声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-在属性上声明"}},[s._v("#")]),s._v(" 4.1.1.在属性上声明")]),s._v(" "),a("p",[s._v("一般情况下，可以直接在某个需要拆卸的属性上通过注解声明一次操作：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Department")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Disassemble")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("如上实例，在填充 "),a("code",[s._v("Department")]),s._v(" 对象前，将会先把 "),a("code",[s._v("Department")]),s._v(" 中的 "),a("code",[s._v("Employee")]),s._v(" 对象全部取出并摊平，若 "),a("code",[s._v("Employee")]),s._v(" 也有需要拆卸的嵌套对象，则会一并取出摊平，一致递归到所有的对象都平铺为止。")]),s._v(" "),a("p",[s._v("拆卸操作支持处理数组、"),a("code",[s._v("Collection")]),s._v(" 集合或单个对象。")]),s._v(" "),a("h3",{attrs:{id:"_4-1-2-在类上声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-在类上声明"}},[s._v("#")]),s._v(" 4.1.2.在类上声明")]),s._v(" "),a("p",[s._v("与 "),a("code",[s._v("@Assemble")]),s._v(" 一样，"),a("code",[s._v("@Disassemble")]),s._v(" 同样可以声明在类上：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Operations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    disassembles "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Disassemble")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"employees"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Department")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("当声明在类上时，需要通过 "),a("code",[s._v("key")]),s._v(" 绑定需要拆卸的字段。")]),s._v(" "),a("h2",{attrs:{id:"_4-2-动态类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-动态类型"}},[s._v("#")]),s._v(" 4.2.动态类型")]),s._v(" "),a("p",[s._v("有些时候无法在编译期就确定要填充的对象类型，此时可以不指定 "),a("code",[s._v("type")]),s._v("，而是等到执行拆卸时再动态的推断类型：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Department")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Disassemble")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 无法确定填充类型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("相对固定类型的操作来说，性能会受到点影响。")]),s._v(" "),a("p",[s._v("该功能依赖类型解析器 "),a("code",[s._v("TypeResolver")]),s._v(" 实现，用户可以实现接口替换默认的类型解析器。")]),s._v(" "),a("h2",{attrs:{id:"_4-3-拆卸操作处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-拆卸操作处理器"}},[s._v("#")]),s._v(" 4.3.拆卸操作处理器")]),s._v(" "),a("p",[s._v("所有的拆卸操作都通过拆卸操作处理器 "),a("code",[s._v("DisassembleOperationHandler")]),s._v(" 完成处理，用户同样也可以在注解中选择：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Department")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Disassemble")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        handler "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReflectDisassembleOperationHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定操作处理器")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("在配置解析过程中，会从 "),a("code",[s._v("Spring")]),s._v(" 上下文根据指定的类型获取对应的操作处理器。")]),s._v(" "),a("p",[s._v("目前 "),a("code",[s._v("AssembleOperationHandler")]),s._v(" 只提供了基于反射的 "),a("code",[s._v("ReflectDisassembleOperationHandler")]),s._v(" 一种实现，用户可以自定义操作处理器，以便更好的支持其他类型的数据，或者提高处理器的执行效率。")])])}),[],!1,null,null,null);a.default=n.exports}}]);