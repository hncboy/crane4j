(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{284:function(a,s,t){a.exports=t.p+"assets/img/image-20230220191856595.fbd0659c.png"},307:function(a,s,t){"use strict";t.r(s);var e=t(14),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_4-1-执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-执行流程"}},[a._v("#")]),a._v(" 4.1.执行流程")]),a._v(" "),s("p",[s("img",{attrs:{src:t(284),alt:"image-20230220191856595"}})]),a._v(" "),s("p",[s("code",[a._v("crane4j")]),a._v(" 的整体执行流程并不复杂，可大致分为两阶段：")]),a._v(" "),s("ul",[s("li",[a._v("配置解析阶段：根据 "),s("code",[a._v("Class")]),a._v(" 解析获得对应的操作配置对象 "),s("code",[a._v("BeanOperation")]),a._v("，通过该配置对象我们可以知道一个对象中有多少个字段需要处理，要怎么处理，在 "),s("code",[a._v("BeanOperation")]),a._v(" 里面，一个 "),s("code",[a._v("key")]),a._v(" 字段对应的一个操作会被转为一个 "),s("code",[a._v("Operation")]),a._v(" 对象；")]),a._v(" "),s("li",[a._v("操作执行阶段：输入要处理的对象，与该对象类型对应操作配置，然后交由操作执行器 "),s("code",[a._v("BeanOperationExecutor")]),a._v(" 生成待完成的任务 "),s("code",[a._v("Execution")]),a._v("，并最终分发给操作执行器 "),s("code",[a._v("OperationHandler")]),a._v("，"),s("code",[a._v("OperationHandler")]),a._v(" 会根据配置从数据源获得对象，并完成具体的字段映射；")])]),a._v(" "),s("p",[a._v("比如上图，即描述了 "),s("code",[a._v("Foo")]),a._v(" 对象是如何通过 "),s("code",[a._v("id")]),a._v(" 获得数据源，并将数据源中的 "),s("code",[a._v("userName")]),a._v(" 字段值映射到 "),s("code",[a._v("Foo")]),a._v(" 的 "),s("code",[a._v("name")]),a._v(" 字段上的。")]),a._v(" "),s("h2",{attrs:{id:"_4-2-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-组件"}},[a._v("#")]),a._v(" 4.2.组件")]),a._v(" "),s("p",[a._v("“根据 A 的 key 值拿到 B，再把 B 的属性映射到 A”，围绕着这句话，"),s("code",[a._v("crane4j")]),a._v(" 抽象出了用于实现功能核心组件：")]),a._v(" "),s("ul",[s("li",[a._v("数据源容器 "),s("code",[a._v("Container")]),a._v("：用于提供数据源的组件，用于为“根据 A 的 key 值拿到 B”；")]),a._v(" "),s("li",[a._v("操作配置 "),s("code",[a._v("Operation")]),a._v("：用于存储完成一次填充操作所需的处理器和数据源容器以及属性映射配置的对象，即上述行为的执行配置；")]),a._v(" "),s("li",[a._v("操作处理器 "),s("code",[a._v("OperationHandler")]),a._v("：即实际用于实际用于完成装配、拆卸操作，用于完成上述行为的主体；")]),a._v(" "),s("li",[a._v("类级操作配置 "),s("code",[a._v("BeanOperation")]),a._v("：与 "),s("code",[a._v("Class")]),a._v(" 一对一，用于存放一个类型对应的所有操作配置；")]),a._v(" "),s("li",[a._v("类级操作执行器 "),s("code",[a._v("BeanOperationExecutor")]),a._v("：用于根据类操作配置，驱动处理器完成全部操作的组件；")]),a._v(" "),s("li",[a._v("操作配置解析器 "),s("code",[a._v("BeanOperationParser")]),a._v("：用于解析类并获得配置对象的解析器；")])]),a._v(" "),s("p",[s("code",[a._v("crane4j")]),a._v(" 是笔者对面向接口编程的一次实践， 在开发过程中尽可能的遵循了单一职责原则与合成复用原则，因此 "),s("code",[a._v("crane4j")]),a._v(" 的每一部分功能实际上都是由多个抽象接口共同定义的，这使得 "),s("code",[a._v("crane4j")]),a._v(" 允许——并且也欢迎——用户使用自定义的组件实现替换作者提供的默认组件实现。")]),a._v(" "),s("h2",{attrs:{id:"_4-3-装配、拆卸、填充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-装配、拆卸、填充"}},[a._v("#")]),a._v(" 4.3.装配、拆卸、填充")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("crane4j")]),a._v(" 中，“根据 A 的 key 值拿到 B，再把 B 的属性映射到 A” 这段话对应的就是一次"),s("strong",[a._v("装配操作")]),a._v("，在代码中就是一个 "),s("code",[a._v("@Assemble")]),a._v(" 注解：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Assemble")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("container "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" props "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Mapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("而若待处理的对象有需要提取的嵌套对象，则将把 “把 A 字段里嵌套的对象取出并展开” 这一操作称为"),s("strong",[a._v("拆卸操作")]),a._v("，在代码中对应一个 "),s("code",[a._v("@Disassemble")]),a._v(" 注解：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Disassemble")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("为了在一次批处理中尽可能多的处理同一类型的对象，拆卸操作一般都发生在装配操作之前。")]),a._v(" "),s("p",[a._v("如果一个要处理完一个对象，则这个过程可能需要完成多次拆卸和装配操作，这一整个过程，可以直接称其为"),s("strong",[a._v("填充操作")]),a._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);