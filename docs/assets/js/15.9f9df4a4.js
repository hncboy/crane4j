(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{278:function(t,e,o){t.exports=o.p+"assets/img/image-20230227144243154.89fafda2.png"},299:function(t,e,o){"use strict";o.r(e);var r=o(14),v=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_9-0-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-0-概述"}},[t._v("#")]),t._v(" 9.0 概述")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:o(278),alt:"image-20230227144243154"}}),t._v(" "),e("p",[t._v("容器提供者 "),e("code",[t._v("ContainerProvider")]),t._v(" 是用于隔离数据源，并且对数据源获取途径进行增强的组件，它可以理解为数据源容器的容器。当解析器解析配置时，会先找到指定的 "),e("code",[t._v("ContainerProvider")]),t._v("，然后再从中根据 "),e("code",[t._v("namespace")]),t._v(" 获取数据。")]),t._v(" "),e("p",[e("code",[t._v("ContainerProvider")]),t._v(" 隔离了来源不同的容器，比如基于 JPA 的容器会有独立的 "),e("code",[t._v("JpaContainerProvider")]),t._v("，而基于 "),e("code",[t._v("Mybatis")]),t._v(" 的容器也会有独立的 "),e("code",[t._v("MyabtisContainerProvider")]),t._v("，这样当项目启动的时候，不同来源的容器的初始化就会相对独立。")]),t._v(" "),e("p",[t._v("此外，"),e("code",[t._v("ContainerProvider")]),t._v(" 本身也能够对容器查找提供一定的增强，比如支持输入表达式，然后再执行得到具体的容器命名空间再去查找容器，或者直接支持根据某些特定的规则动态的获取容器。")]),t._v(" "),e("p",[e("strong",[t._v("目前默认还没有提供扩展实现")]),t._v("，不过后期会基于它进行扩展，若有必要用户也可以自行实现。")])])}),[],!1,null,null,null);e.default=v.exports}}]);